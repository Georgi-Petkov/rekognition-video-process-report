AWSTemplateFormatVersion: 2010-09-09
Description: Emotions Project - CloudFormation Template

Parameters:
  BucketName:
    Description: The S3 bucket where you store your lambda code
    Type: String
    Default: sentiment-analysis-xpto

  BucketNameCode:
    Description: The S3 bucket where you store your lambda code
    Type: String
    Default: sentiment-analysis-xpto

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - BucketPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaGetFaces.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .mp4
                  
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: role-rekognition-video-analysis-cf
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonRekognitionServiceRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: rekognition-video-analysis-pass
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/role-rekognition-video-analysis-cf'

  RekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: role-rekognition-video-analysis-cf
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonRekognitionServiceRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - rekognition.amazonaws.com
          Action:
          - sts:AssumeRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: role-lambda-video-analysis-cf
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonRekognitionServiceRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: rekognition-video-analysis-pass-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/role-rekognition-video-analysis-cf'
  
# Lambda function that will trigger textract
  LambdaGetFaces:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        S3Bucket: !Ref BucketNameCode
        S3Key: code/lambda_get_faces.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      FunctionName: lambda-get-faces
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          ROLE_ARN: !Ref BucketName

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaGetFaces
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${BucketName}

  LambdaGetEmotions:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketNameCode
        S3Key: code/lambda_get_emotions.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      FunctionName: lambda-get-emotions
      Timeout: 10
      MemorySize: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  MySNSTopic:
    Type: AWS::SNS::Topic
    DependsOn:
      - QueueSQS
    Properties:
      TopicName: "rekognition-video-analysis-topic"

  QueueSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: rekognition-video-analysis-queue

  LambdaSQSEvent:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt QueueSQS.Arn
      FunctionName: !GetAtt LambdaGetEmotions.Arn

  sqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - QueueSQS
    Properties:
      Queues:
        - !Ref QueueSQS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - SQS:SendMessage
            Resource: !GetAtt QueueSQS.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rekognition-video-analysis-topic'
Outputs:
  QueueURL: 
    Description: "URL of new Amazon SQS Queue"
    Value: 
      Ref: QueueSQS